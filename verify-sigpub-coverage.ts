/**
 * Verify if there are more SIGPub municipalities to implement
 */

import * as fs from 'fs';

async function verifySigpubCoverage() {
  console.log('üîç Verificando Cobertura Real do SIGPub\n');
  console.log('='.repeat(80));

  // Load SIGPub cities configuration
  const sigpubCitiesPath = 'src/spiders/configs/sigpub-cities.json';
  
  if (!fs.existsSync(sigpubCitiesPath)) {
    console.log('‚ùå Arquivo sigpub-cities.json n√£o encontrado');
    return;
  }

  const sigpubCities = JSON.parse(fs.readFileSync(sigpubCitiesPath, 'utf-8'));
  
  console.log(`\nüìä Estat√≠sticas do SIGPub\n`);
  console.log(`Total de munic√≠pios configurados: ${sigpubCities.length}`);
  
  // Group by state
  const byState: Record<string, number> = {};
  
  for (const city of sigpubCities) {
    const state = city.stateCode || city.id.substring(0, 2).toUpperCase();
    byState[state] = (byState[state] || 0) + 1;
  }
  
  console.log(`\nEstados cobertos: ${Object.keys(byState).length}`);
  console.log('\nüìç Munic√≠pios por Estado:\n');
  
  const sortedStates = Object.entries(byState).sort((a, b) => b[1] - a[1]);
  
  for (const [state, count] of sortedStates) {
    console.log(`${state}: ${count.toString().padStart(4)} munic√≠pios`);
  }
  
  console.log('\n' + '='.repeat(80));
  console.log('\nüéØ An√°lise de Estados N√£o Cobertos pelo SIGPub\n');
  
  const brazilStates = [
    'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA',
    'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN',
    'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'
  ];
  
  const uncoveredStates = brazilStates.filter(state => !byState[state]);
  
  if (uncoveredStates.length > 0) {
    console.log('Estados SEM cobertura SIGPub:');
    console.log(uncoveredStates.join(', '));
  } else {
    console.log('‚úÖ Todos os estados t√™m pelo menos alguma cobertura SIGPub!');
  }
  
  console.log('\n' + '='.repeat(80));
  console.log('\nüí° Conclus√£o\n');
  
  if (uncoveredStates.length > 0) {
    console.log(`‚ö†Ô∏è  SIGPub N√ÉO cobre ${uncoveredStates.length} estados.`);
    console.log('   Esses estados precisam de outras plataformas ou n√£o t√™m presen√ßa SIGPub.');
  } else {
    console.log('‚úÖ SIGPub tem presen√ßa em todos os 27 estados!');
    console.log('   A estrat√©gia de "expandir SIGPub" pode n√£o ser vi√°vel.');
  }
  
  console.log('\nüìù Recomenda√ß√£o:\n');
  console.log('   1. Verificar se os 1.573 munic√≠pios SIGPub j√° est√£o todos implementados');
  console.log('   2. Se sim, focar em OUTRAS plataformas para expandir cobertura');
  console.log('   3. Pesquisar plataformas dominantes nos estados n√£o cobertos (SP, BA, etc.)');
  
  console.log('\n' + '='.repeat(80));
}

verifySigpubCoverage()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('\n‚ùå Verification failed:', error);
    console.error(error.stack);
    process.exit(1);
  });
